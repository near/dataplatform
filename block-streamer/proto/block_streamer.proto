syntax = "proto3";

package blockstreamer;

// The BlockStreamer service provides RPCs to manage BlockStream instances
service BlockStreamer {
    // Starts a new BlockStream process
    rpc StartStream (StartStreamRequest) returns (StartStreamResponse);

    // Stops an existing BlockStream process
    rpc StopStream (StopStreamRequest) returns (StopStreamResponse);

    // Lists all current BlockStream processes
    rpc ListStreams (ListStreamsRequest) returns (ListStreamsResponse);

    // Get info for an existing BlockStream process
    rpc GetStream (GetStreamRequest) returns (StreamInfo);
}

// Request message for getting a BlockStream
message GetStreamRequest {
    // ID or handle of the BlockStream
    string stream_id = 1;
}

// Request message for starting a BlockStream
message StartStreamRequest {
    // Which block height to start from
    uint64 start_block_height = 1;
    // Account ID which the indexer is defined under
    string account_id = 2;
    // Name of the indexer
    string function_name = 3;
    // Block height corresponding to the created/updated height of the indexer
    uint64 version = 4;
    // Key of Redis Stream to publish blocks to
    string redis_stream = 5;
    // Filter rule to apply to incoming blocks
    oneof rule {
        ActionAnyRule action_any_rule = 6;
        ActionFunctionCallRule action_function_call_rule = 7;
    }
}

// Match any action against the specified account
message ActionAnyRule {
    // Account ID pattern to match against
    string affected_account_id = 1;
    // Status of the action to match against
    Status status = 2;
}

// Match a specific function call against the specified account
message ActionFunctionCallRule {
    // Account ID pattern to match against
    string affected_account_id = 1;
    // Function name to match against
    string function_name = 2;
    // Status of the action to match against
    Status status = 3;
}

enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_SUCCESS = 1;
    STATUS_FAILURE = 2;
    STATUS_ANY = 3;
}

// Response message for starting a BlockStream
message StartStreamResponse {
    // ID or handle of the started BlockStream
    string stream_id = 1;
}

// Request message for stopping a BlockStream
message StopStreamRequest {
    // ID or handle of the BlockStream to stop
    string stream_id = 1;
}

// Response message for stopping a BlockStream
message StopStreamResponse {
    // Confirmation message or status
    string status = 1;
}

// Request message for listing BlockStreams
message ListStreamsRequest {
    // Optional filters or parameters for listing streams
}

// Response message for listing BlockStreams
message ListStreamsResponse {
    // List of active BlockStreams
    repeated StreamInfo streams = 1;
}

// Information about a single BlockStream instance
message StreamInfo {
    // ID or handle of the BlockStream
    string stream_id = 1;
    // Account ID of the indexer
    string account_id = 3;
    // Function name of the indexer
    string function_name = 4;
    // Block height corresponding to the created/updated height of the indexer
    uint64 version = 5;
}
