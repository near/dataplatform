/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter long_type_string,eslint_disable
// @generated from protobuf file "runner.proto" (package "spec", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Start Stream Request
 *
 * @generated from protobuf message spec.StartStreamRequest
 */
export interface StartStreamRequest {
    /**
     * @generated from protobuf field: int64 start_block_height = 1;
     */
    startBlockHeight: string;
    /**
     * @generated from protobuf field: string indexer_config = 2;
     */
    indexerConfig: string; // JSON containing code, schema, etc.
    /**
     * @generated from protobuf field: string stream_id = 3;
     */
    streamId: string;
}
/**
 * Start Stream Response
 *
 * @generated from protobuf message spec.StartStreamResponse
 */
export interface StartStreamResponse {
    /**
     * @generated from protobuf field: string stream_id = 1;
     */
    streamId: string;
}
/**
 * Stop Stream Request
 *
 * @generated from protobuf message spec.StopStreamRequest
 */
export interface StopStreamRequest {
    /**
     * @generated from protobuf field: string stream_id = 1;
     */
    streamId: string;
}
/**
 * Stop Stream Response
 *
 * @generated from protobuf message spec.StopStreamResponse
 */
export interface StopStreamResponse {
    /**
     * @generated from protobuf field: string stream_id = 1;
     */
    streamId: string;
    /**
     * @generated from protobuf field: string status = 2;
     */
    status: string;
}
/**
 * List Stream Request
 *
 * @generated from protobuf message spec.ListStreamsRequest
 */
export interface ListStreamsRequest {
    /**
     * @generated from protobuf field: string placeholder = 1;
     */
    placeholder: string;
}
/**
 * List Stream Response
 *
 * @generated from protobuf message spec.ListStreamsResponse
 */
export interface ListStreamsResponse {
    /**
     * List of all streams, including stopped or crashed ones
     *
     * @generated from protobuf field: repeated spec.StreamInfo streams = 1;
     */
    streams: StreamInfo[];
}
/**
 * Information about a single BlockStream instance.
 *
 * @generated from protobuf message spec.StreamInfo
 */
export interface StreamInfo {
    /**
     * @generated from protobuf field: string stream_id = 1;
     */
    streamId: string;
    /**
     * @generated from protobuf field: int64 start_block_height = 2;
     */
    startBlockHeight: string;
    /**
     * @generated from protobuf field: string indexer_name = 3;
     */
    indexerName: string;
    /**
     * @generated from protobuf field: string chain_id = 4;
     */
    chainId: string;
    /**
     * @generated from protobuf field: string status = 5;
     */
    status: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class StartStreamRequest$Type extends MessageType<StartStreamRequest> {
    constructor() {
        super("spec.StartStreamRequest", [
            { no: 1, name: "start_block_height", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "indexer_config", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "stream_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StartStreamRequest>): StartStreamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.startBlockHeight = "0";
        message.indexerConfig = "";
        message.streamId = "";
        if (value !== undefined)
            reflectionMergePartial<StartStreamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartStreamRequest): StartStreamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 start_block_height */ 1:
                    message.startBlockHeight = reader.int64().toString();
                    break;
                case /* string indexer_config */ 2:
                    message.indexerConfig = reader.string();
                    break;
                case /* string stream_id */ 3:
                    message.streamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartStreamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 start_block_height = 1; */
        if (message.startBlockHeight !== "0")
            writer.tag(1, WireType.Varint).int64(message.startBlockHeight);
        /* string indexer_config = 2; */
        if (message.indexerConfig !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.indexerConfig);
        /* string stream_id = 3; */
        if (message.streamId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.streamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.StartStreamRequest
 */
export const StartStreamRequest = new StartStreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartStreamResponse$Type extends MessageType<StartStreamResponse> {
    constructor() {
        super("spec.StartStreamResponse", [
            { no: 1, name: "stream_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StartStreamResponse>): StartStreamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.streamId = "";
        if (value !== undefined)
            reflectionMergePartial<StartStreamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartStreamResponse): StartStreamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stream_id */ 1:
                    message.streamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartStreamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stream_id = 1; */
        if (message.streamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.streamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.StartStreamResponse
 */
export const StartStreamResponse = new StartStreamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopStreamRequest$Type extends MessageType<StopStreamRequest> {
    constructor() {
        super("spec.StopStreamRequest", [
            { no: 1, name: "stream_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StopStreamRequest>): StopStreamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.streamId = "";
        if (value !== undefined)
            reflectionMergePartial<StopStreamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopStreamRequest): StopStreamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stream_id */ 1:
                    message.streamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopStreamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stream_id = 1; */
        if (message.streamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.streamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.StopStreamRequest
 */
export const StopStreamRequest = new StopStreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopStreamResponse$Type extends MessageType<StopStreamResponse> {
    constructor() {
        super("spec.StopStreamResponse", [
            { no: 1, name: "stream_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StopStreamResponse>): StopStreamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.streamId = "";
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<StopStreamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopStreamResponse): StopStreamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stream_id */ 1:
                    message.streamId = reader.string();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopStreamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stream_id = 1; */
        if (message.streamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.streamId);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.StopStreamResponse
 */
export const StopStreamResponse = new StopStreamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListStreamsRequest$Type extends MessageType<ListStreamsRequest> {
    constructor() {
        super("spec.ListStreamsRequest", [
            { no: 1, name: "placeholder", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListStreamsRequest>): ListStreamsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.placeholder = "";
        if (value !== undefined)
            reflectionMergePartial<ListStreamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListStreamsRequest): ListStreamsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string placeholder */ 1:
                    message.placeholder = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListStreamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string placeholder = 1; */
        if (message.placeholder !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.placeholder);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.ListStreamsRequest
 */
export const ListStreamsRequest = new ListStreamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListStreamsResponse$Type extends MessageType<ListStreamsResponse> {
    constructor() {
        super("spec.ListStreamsResponse", [
            { no: 1, name: "streams", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StreamInfo }
        ]);
    }
    create(value?: PartialMessage<ListStreamsResponse>): ListStreamsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.streams = [];
        if (value !== undefined)
            reflectionMergePartial<ListStreamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListStreamsResponse): ListStreamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated spec.StreamInfo streams */ 1:
                    message.streams.push(StreamInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListStreamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated spec.StreamInfo streams = 1; */
        for (let i = 0; i < message.streams.length; i++)
            StreamInfo.internalBinaryWrite(message.streams[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.ListStreamsResponse
 */
export const ListStreamsResponse = new ListStreamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamInfo$Type extends MessageType<StreamInfo> {
    constructor() {
        super("spec.StreamInfo", [
            { no: 1, name: "stream_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_block_height", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 3, name: "indexer_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "chain_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamInfo>): StreamInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.streamId = "";
        message.startBlockHeight = "0";
        message.indexerName = "";
        message.chainId = "";
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<StreamInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamInfo): StreamInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stream_id */ 1:
                    message.streamId = reader.string();
                    break;
                case /* int64 start_block_height */ 2:
                    message.startBlockHeight = reader.int64().toString();
                    break;
                case /* string indexer_name */ 3:
                    message.indexerName = reader.string();
                    break;
                case /* string chain_id */ 4:
                    message.chainId = reader.string();
                    break;
                case /* string status */ 5:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stream_id = 1; */
        if (message.streamId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.streamId);
        /* int64 start_block_height = 2; */
        if (message.startBlockHeight !== "0")
            writer.tag(2, WireType.Varint).int64(message.startBlockHeight);
        /* string indexer_name = 3; */
        if (message.indexerName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.indexerName);
        /* string chain_id = 4; */
        if (message.chainId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.chainId);
        /* string status = 5; */
        if (message.status !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spec.StreamInfo
 */
export const StreamInfo = new StreamInfo$Type();
/**
 * @generated ServiceType for protobuf service spec.Runner
 */
export const Runner = new ServiceType("spec.Runner", [
    { name: "StartStream", options: {}, I: StartStreamRequest, O: StartStreamResponse },
    { name: "StopStream", options: {}, I: StopStreamRequest, O: StopStreamResponse },
    { name: "ListStreams", options: {}, I: ListStreamsRequest, O: ListStreamsResponse }
], { "ts.server": ["GRPC1_SERVER"] });
