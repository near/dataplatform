/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter long_type_string,eslint_disable
// @generated from protobuf file "runner.proto" (package "spec", syntax proto3)
// tslint:disable
import { Runner } from "./runner";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { ListStreamsResponse } from "./runner";
import type { ListStreamsRequest } from "./runner";
import type { StopStreamResponse } from "./runner";
import type { StopStreamRequest } from "./runner";
import type { StartStreamResponse } from "./runner";
import type { StartStreamRequest } from "./runner";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service spec.Runner
 */
export interface IRunnerClient {
    /**
     * Starts a new Runner stream worker
     *
     * @generated from protobuf rpc: StartStream(spec.StartStreamRequest) returns (spec.StartStreamResponse);
     */
    startStream(input: StartStreamRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: StartStreamResponse) => void): grpc.ClientUnaryCall;
    startStream(input: StartStreamRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: StartStreamResponse) => void): grpc.ClientUnaryCall;
    startStream(input: StartStreamRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: StartStreamResponse) => void): grpc.ClientUnaryCall;
    startStream(input: StartStreamRequest, callback: (err: grpc.ServiceError | null, value?: StartStreamResponse) => void): grpc.ClientUnaryCall;
    /**
     * Stops an existing Runner stream worker
     *
     * @generated from protobuf rpc: StopStream(spec.StopStreamRequest) returns (spec.StopStreamResponse);
     */
    stopStream(input: StopStreamRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: StopStreamResponse) => void): grpc.ClientUnaryCall;
    stopStream(input: StopStreamRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: StopStreamResponse) => void): grpc.ClientUnaryCall;
    stopStream(input: StopStreamRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: StopStreamResponse) => void): grpc.ClientUnaryCall;
    stopStream(input: StopStreamRequest, callback: (err: grpc.ServiceError | null, value?: StopStreamResponse) => void): grpc.ClientUnaryCall;
    /**
     * Lists all Runner stream workers
     *
     * @generated from protobuf rpc: ListStreams(spec.ListStreamsRequest) returns (spec.ListStreamsResponse);
     */
    listStreams(input: ListStreamsRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ListStreamsResponse) => void): grpc.ClientUnaryCall;
    listStreams(input: ListStreamsRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ListStreamsResponse) => void): grpc.ClientUnaryCall;
    listStreams(input: ListStreamsRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ListStreamsResponse) => void): grpc.ClientUnaryCall;
    listStreams(input: ListStreamsRequest, callback: (err: grpc.ServiceError | null, value?: ListStreamsResponse) => void): grpc.ClientUnaryCall;
}
/**
 * @generated from protobuf service spec.Runner
 */
export class RunnerClient extends grpc.Client implements IRunnerClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * Starts a new Runner stream worker
     *
     * @generated from protobuf rpc: StartStream(spec.StartStreamRequest) returns (spec.StartStreamResponse);
     */
    startStream(input: StartStreamRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: StartStreamResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: StartStreamResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: StartStreamResponse) => void)): grpc.ClientUnaryCall {
        const method = Runner.methods[0];
        return this.makeUnaryRequest<StartStreamRequest, StartStreamResponse>(`/${Runner.typeName}/${method.name}`, (value: StartStreamRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): StartStreamResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * Stops an existing Runner stream worker
     *
     * @generated from protobuf rpc: StopStream(spec.StopStreamRequest) returns (spec.StopStreamResponse);
     */
    stopStream(input: StopStreamRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: StopStreamResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: StopStreamResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: StopStreamResponse) => void)): grpc.ClientUnaryCall {
        const method = Runner.methods[1];
        return this.makeUnaryRequest<StopStreamRequest, StopStreamResponse>(`/${Runner.typeName}/${method.name}`, (value: StopStreamRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): StopStreamResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * Lists all Runner stream workers
     *
     * @generated from protobuf rpc: ListStreams(spec.ListStreamsRequest) returns (spec.ListStreamsResponse);
     */
    listStreams(input: ListStreamsRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ListStreamsResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ListStreamsResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: ListStreamsResponse) => void)): grpc.ClientUnaryCall {
        const method = Runner.methods[2];
        return this.makeUnaryRequest<ListStreamsRequest, ListStreamsResponse>(`/${Runner.typeName}/${method.name}`, (value: ListStreamsRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ListStreamsResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
