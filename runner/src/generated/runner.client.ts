/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter long_type_string,eslint_disable
// @generated from protobuf file "runner.proto" (package "spec", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Runner } from "./runner";
import type { ListStreamsResponse } from "./runner";
import type { ListStreamsRequest } from "./runner";
import type { StopStreamResponse } from "./runner";
import type { StopStreamRequest } from "./runner";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StartStreamResponse } from "./runner";
import type { StartStreamRequest } from "./runner";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service spec.Runner
 */
export interface IRunnerClient {
    /**
     * Starts a new Runner stream worker
     *
     * @generated from protobuf rpc: StartStream(spec.StartStreamRequest) returns (spec.StartStreamResponse);
     */
    startStream(input: StartStreamRequest, options?: RpcOptions): UnaryCall<StartStreamRequest, StartStreamResponse>;
    /**
     * Stops an existing Runner stream worker
     *
     * @generated from protobuf rpc: StopStream(spec.StopStreamRequest) returns (spec.StopStreamResponse);
     */
    stopStream(input: StopStreamRequest, options?: RpcOptions): UnaryCall<StopStreamRequest, StopStreamResponse>;
    /**
     * Lists all Runner stream workers
     *
     * @generated from protobuf rpc: ListStreams(spec.ListStreamsRequest) returns (spec.ListStreamsResponse);
     */
    listStreams(input: ListStreamsRequest, options?: RpcOptions): UnaryCall<ListStreamsRequest, ListStreamsResponse>;
}
/**
 * @generated from protobuf service spec.Runner
 */
export class RunnerClient implements IRunnerClient, ServiceInfo {
    typeName = Runner.typeName;
    methods = Runner.methods;
    options = Runner.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Starts a new Runner stream worker
     *
     * @generated from protobuf rpc: StartStream(spec.StartStreamRequest) returns (spec.StartStreamResponse);
     */
    startStream(input: StartStreamRequest, options?: RpcOptions): UnaryCall<StartStreamRequest, StartStreamResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartStreamRequest, StartStreamResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Stops an existing Runner stream worker
     *
     * @generated from protobuf rpc: StopStream(spec.StopStreamRequest) returns (spec.StopStreamResponse);
     */
    stopStream(input: StopStreamRequest, options?: RpcOptions): UnaryCall<StopStreamRequest, StopStreamResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<StopStreamRequest, StopStreamResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Lists all Runner stream workers
     *
     * @generated from protobuf rpc: ListStreams(spec.ListStreamsRequest) returns (spec.ListStreamsResponse);
     */
    listStreams(input: ListStreamsRequest, options?: RpcOptions): UnaryCall<ListStreamsRequest, ListStreamsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListStreamsRequest, ListStreamsResponse>("unary", this._transport, method, opt, input);
    }
}
