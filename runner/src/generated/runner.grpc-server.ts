/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter long_type_string,eslint_disable
// @generated from protobuf file "runner.proto" (package "spec", syntax proto3)
// tslint:disable
import { ListStreamsResponse } from "./runner";
import { ListStreamsRequest } from "./runner";
import { StopStreamResponse } from "./runner";
import { StopStreamRequest } from "./runner";
import { StartStreamResponse } from "./runner";
import { StartStreamRequest } from "./runner";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service spec.Runner
 */
export interface IRunner extends grpc.UntypedServiceImplementation {
    /**
     * Starts a new Runner stream worker
     *
     * @generated from protobuf rpc: StartStream(spec.StartStreamRequest) returns (spec.StartStreamResponse);
     */
    startStream: grpc.handleUnaryCall<StartStreamRequest, StartStreamResponse>;
    /**
     * Stops an existing Runner stream worker
     *
     * @generated from protobuf rpc: StopStream(spec.StopStreamRequest) returns (spec.StopStreamResponse);
     */
    stopStream: grpc.handleUnaryCall<StopStreamRequest, StopStreamResponse>;
    /**
     * Lists all Runner stream workers
     *
     * @generated from protobuf rpc: ListStreams(spec.ListStreamsRequest) returns (spec.ListStreamsResponse);
     */
    listStreams: grpc.handleUnaryCall<ListStreamsRequest, ListStreamsResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service spec.Runner.
 *
 * Usage: Implement the interface IRunner and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IRunner = ...
 * server.addService(runnerDefinition, service);
 * ```
 */
export const runnerDefinition: grpc.ServiceDefinition<IRunner> = {
    startStream: {
        path: "/spec.Runner/StartStream",
        originalName: "StartStream",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => StartStreamResponse.fromBinary(bytes),
        requestDeserialize: bytes => StartStreamRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(StartStreamResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(StartStreamRequest.toBinary(value))
    },
    stopStream: {
        path: "/spec.Runner/StopStream",
        originalName: "StopStream",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => StopStreamResponse.fromBinary(bytes),
        requestDeserialize: bytes => StopStreamRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(StopStreamResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(StopStreamRequest.toBinary(value))
    },
    listStreams: {
        path: "/spec.Runner/ListStreams",
        originalName: "ListStreams",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ListStreamsResponse.fromBinary(bytes),
        requestDeserialize: bytes => ListStreamsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ListStreamsResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ListStreamsRequest.toBinary(value))
    }
};
