version: "3.9"  # optional since v1.27.0
services:

  coordinator:
    build:
      context: ./indexer
      args:
        - CARGO_BUILD_MODE=debug
    depends_on:
      - redis
    environment:
      REDIS_CONNECTION_STRING: redis://redis
      LAKE_AWS_ACCESS_KEY:
      LAKE_AWS_SECRET_ACCESS_KEY:
      QUEUE_URL: MOCK
      START_FROM_BLOCK_QUEUE_URL: MOCK
      PORT: 9180
      REGISTRY_CONTRACT_ID: dev-queryapi.dataplatform.near
      RUNNER_HOST: runner
      RUNNER_PORT: 6001
    command:
      - mainnet
      - from-interruption

  runner:
    build:
      context: ./runner
    depends_on:
    - "hasura-graphql"
    - "redis"
    environment:
      REGION: eu-central-1
      HASURA_ENDPOINT: http://hasura-graphql:8080
      HASURA_ADMIN_SECRET: myadminsecretkey
      REDIS_CONNECTION_STRING: redis://redis
      PGHOST: postgres
      PGPORT: 5432
      PGUSER: postgres
      PGPASSWORD: postgrespassword
      PGDATABASE: postgres
      PORT: 9180
      AWS_ACCESS_KEY_ID:
      AWS_SECRET_ACCESS_KEY:
      RUNNER_HOST: runner
      RUNNER_PORT: 6001

  redis:
    image: redis
    command:
      - redis-server
      - "--save 60 1"
      - "--loglevel warning"
    volumes:
      - redis:/data
    ports:
      - "6379:6379"

  postgres:
    image: postgres:12
    restart: always
    volumes:
    - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword
    ports:
      - "5432:5432"

  hasura-auth:
    build:
      context: ./hasura-authentication-service
    ports:
    - "4000:4000"
    environment:
      PORT: 4000
      DEFAULT_HASURA_ROLE: append

  hasura-graphql:
    image: hasura/graphql-engine:latest
    ports:
    - "8080:8080"
    depends_on:
    - "postgres"
    - "hasura-auth"
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_AUTH_HOOK: http://hasura-auth:4000/auth
  grafana:
    image: grafana/grafana
    volumes:
      - grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secret
    
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
      
volumes:
  postgres:
  redis:
  grafana:
